#!/usr/bin/env python2

# <SPDX-License-Identifier: Apache-2.0>
# Copyright (c) 2014-2015 University of Nebraska at Omaha (UNO) and other
# contributors.

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

'''Usage:
{0} [options] (FILE | -i DOCID | -c PACKAGEID)
{0} [--init | --init-noconfirm]
{0} --help

Options:
  -c, --create=PACKAGEID      Create and store document from an
                                already-scanned package
  -i, --doc-id=DOCID          Generate SPDX document from database
                                (required if FILE argument not specified)
  -n, --no-scan               Don't scan the package if SPDX data has not
                                already been generated
  -p, --print=FORMAT          Print SPDX document in specified format
                                (`tag' or `rdf')
  --init                      Drop and create all tables, then initialize
                                with static data (destructive, will
                                prompt first)
  --init-noconfirm            Same as --init, but don't prompt
'''
#Options taking a TEXT argument require double quotes around the argument.\
# Not implemented:
# --comment=TEXT              Specify SPDX document comment section
# --creator=TEXT              Specify SPDX creator field
# --creator-comment=TEXT      Specify SPDX creator comment field
# --supplier=TEXT             Specify package supplier field
# --package-version=TEXT      Specify package version field
# --download-location=TEXT    Specify package download location field
# --originator=TEXT           Specify package originator field
# --home-page=TEXT            Specify package home page field
# --source-info=TEXT          Specify package source information field
# --license-comments=TEXT     Specify license comments field
# --description=TEXT          Specify package description field

from __future__ import print_function
from settings import settings
from spdxdb import Transaction
import docopt
import os
import sqlsoup
import sys

format_map = {
    'tag': 'templates/2.0.tag',
    'rdf': 'templates/2.0.rdf',
}

PROGNAME = os.path.basename(sys.argv[0])


def extract_fields(argv):
    fields = {
        'document_comment': argv['--comment'],
        'creator': argv['--creator'],
        'creator_comment': argv['--creator-comment'],
        'package_version': argv['--package-version'],
        'package_supplier': argv['--supplier'],
        'package_originator': argv['--originator'],
        'package_download_location': argv['--download-location'],
        'package_home_page': argv['--home-page'],
        'package_source_info': argv['--source-info'],
        'package_license_comments': argv['--license-comments'],
        'package_description': argv['--description']
    }
    for key in fields:
        fields[key] = fields[key] or ''
    return fields


def msg(text, **kwargs):
    print(PROGNAME + ': ' + text, **kwargs)
    sys.stdout.flush()


def dbinit():
    # importing these modules only when needed, for performance
    import dbinit
    db = sqlsoup.SQLSoup(settings['connection_url'])
    url = 'http://spdx.org/licenses/'
    msg('dropping all views...', end='')
    result = dbinit.drop_all_views(db)
    print('ok.')
    msg('dropping all tables...', end='')
    result = dbinit.drop_all_tables(db)
    print('ok.')
    msg('creating all tables...', end='')
    result = dbinit.create_all_tables(db)
    print('ok.')
    msg('creating all views...', end='')
    result = dbinit.create_all_views(db)
    print('ok.')
    msg('loading licenses...', end='')
    result = dbinit.load_licenses(db, url)
    if not result:
        print('error!')
        msg('failed to download and load the license list')
        msg('check your connection to ' + url + ' and make sure it is the correct page')
        return False
    else:
        print('ok.')
    msg('loading creator types...', end='')
    dbinit.load_creator_types(db)
    print('ok.')
    msg('loading default creator...', end='')
    dbinit.load_default_creator(db, settings['creator_string'])
    print('ok.')
    msg('loading annotation types...', end='')
    dbinit.load_annotation_types(db)
    print('ok.')
    msg('loading file types...', end='')
    dbinit.load_file_types(db)
    print('ok.')
    msg('committing changes...', end='')
    db.commit()
    print('ok.')
    return True


def main():
    argv = docopt.docopt(doc=__doc__.format(PROGNAME), version='0.0.1-dev')

    if argv['--init'] or argv['--init-noconfirm']:
        if not argv['--init-noconfirm']:
            msg('preparing to initialize the database')
            msg('all existing data will be deleted!')
            msg('make sure you are connected to the internet before continuing.')
            msg('type the word "YES" (all uppercase) to commit.')
            answer = raw_input()
            if answer != 'YES':
                msg('canceling operation.')
                sys.exit(1)
        if dbinit():
            sys.exit(0)
        else:
            sys.exit(1)

    if not any([argv['--doc-id'], argv['FILE'], argv['--create']]):
        msg("you must specify a document ID, package ID, or file")
        msg("try `" + PROGNAME + " --help' for more information.")
        sys.exit(1)

    #fields = extract_fields(argv)
    package_path = argv['FILE']
    docid = argv['--doc-id']
    package_id = argv['--create']
    scan = not argv['--no-scan']
    output_format = argv['--print']

    if output_format not in ('tag', 'rdf', None):
        msg("unknown output format '" + output_format + "'")
        msg("try `" + PROGNAME + " --help' for more information.")
        sys.exit(1)

    document = None  # remove later??
    db = sqlsoup.SQLSoup(settings['connection_url'])

    with Transaction(db) as spdx:
        if docid is not None:
            document = spdx.fetch_doc(docid)
            if document is None:
                msg('docid {} not found in the database.'.format(docid))
                sys.exit(1)
        elif package_id is not None:
            document = spdx.create_document(package_id)
            if output_format is None:
                print('document_id: ' + str(document.document_id))
        elif scan:
            #docid = spdx.scan_package_create_doc(package_path)
            package = spdx.scan_package(package_path)
            if output_format is None:
                print('package_id: ' + str(package.package_id))
            #document = spdx.fetch_doc(docid)

    with Transaction(db) as spdx:
        if document is not None and output_format is not None:
            print(spdx.render_doc(document, format_map[output_format]))


if __name__ == "__main__":
    main()
